#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.22
#  in conjunction with Tcl version 8.6
#    Apr 18, 2019 05:47:06 PM +0300  platform: Windows NT

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import new_room_gui_support

name = None

def vp_start_gui(users, namepass):
    """Starting point when module is the main routine."""
    global w, root, name
    root = tk.Tk()
    root.resizable(False, False)
    root.after(10, lambda: root.focus_force())
    root.bind('<Key>', new_room_gui_support.check_name)
    top = Toplevel1(root)
    name = namepass
    top.recap(users)
    new_room_gui_support.init(root, top)
    root.mainloop()
    return new_room_gui_support.room_name, new_room_gui_support.users


w = None


def destroy_Toplevel1():
    global w
    w.destroy()
    w = None


class Toplevel1:
    def __init__(self, top=None):
        """This class configures and populates the toplevel window.
           top is the toplevel containing window."""
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("600x480+650+150")
        top.title("Create New Room")
        top.configure(background="#d9d9d9")

        self.Label1 = tk.Label(top)
        self.Label1.place(relx=0.017, rely=0.021, height=31, width=291)
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(font="-family {Segoe UI} -size 14")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(text="""Choose a name for the new room:""")

        self.input = tk.Text(top)
        self.input.place(relx=0.5, rely=0.031, relheight=0.05, relwidth=0.473)
        self.input.configure(background="white")
        self.input.configure(font="-family {Segoe UI} -size 9")
        self.input.configure(foreground="black")
        self.input.configure(highlightbackground="#d9d9d9")
        self.input.configure(highlightcolor="black")
        self.input.configure(insertbackground="black")
        self.input.configure(selectbackground="#c4c4c4")
        self.input.configure(selectforeground="black")
        self.input.configure(width=284)
        self.input.configure(wrap="word")

        self.users = ScrolledListBox(top)
        self.users.place(relx=0.017, rely=0.188, relheight=0.719, relwidth=0.368)

        self.users.configure(background="white")
        self.users.configure(disabledforeground="#a3a3a3")
        self.users.configure(font="-family {Courier New} -size 10")
        self.users.configure(foreground="black")
        self.users.configure(highlightbackground="#d9d9d9")
        self.users.configure(highlightcolor="#d9d9d9")
        self.users.configure(selectbackground="#c4c4c4")
        self.users.configure(selectforeground="black")
        self.users.configure(width=10)

        self.members = ScrolledListBox(top)
        self.members.place(relx=0.617, rely=0.188, relheight=0.719
                , relwidth=0.368)
        self.members.configure(background="white")
        self.members.configure(disabledforeground="#a3a3a3")
        self.members.configure(font="-family {Courier New} -size 10")
        self.members.configure(foreground="black")
        self.members.configure(highlightbackground="#d9d9d9")
        self.members.configure(highlightcolor="#d9d9d9")
        self.members.configure(selectbackground="#c4c4c4")
        self.members.configure(selectforeground="black")
        self.members.configure(width=10)

        self.add = tk.Button(top)
        self.add.place(relx=0.408, rely=0.208, height=54, width=107)
        self.add.configure(activebackground="#ececec")
        self.add.configure(activeforeground="#000000")
        self.add.configure(background="#d9d9d9")
        self.add.configure(command=new_room_gui_support.add)
        self.add.configure(disabledforeground="#a3a3a3")
        self.add.configure(font="-family {Segoe UI} -size 16")
        self.add.configure(foreground="#000000")
        self.add.configure(highlightbackground="#d9d9d9")
        self.add.configure(highlightcolor="black")
        self.add.configure(pady="0")
        self.add.configure(text="""Add""")
        self.add.configure(width=107)

        self.Label2 = tk.Label(top)
        self.Label2.place(relx=0.017, rely=0.125, height=27, width=48)
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(font="-family {Segoe UI} -size 12")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(text="""Users:""")

        self.remove = tk.Button(top)
        self.remove.place(relx=0.408, rely=0.344, height=54, width=107)
        self.remove.configure(activebackground="#ececec")
        self.remove.configure(activeforeground="#000000")
        self.remove.configure(background="#d9d9d9")
        self.remove.configure(command=new_room_gui_support.remove)
        self.remove.configure(disabledforeground="#a3a3a3")
        self.remove.configure(font="-family {Segoe UI} -size 16")
        self.remove.configure(foreground="#000000")
        self.remove.configure(highlightbackground="#d9d9d9")
        self.remove.configure(highlightcolor="black")
        self.remove.configure(pady="0")
        self.remove.configure(text="""Remove""")
        self.remove.configure(width=107)

        self.Label3 = tk.Label(top)
        self.Label3.place(relx=0.617, rely=0.125, height=27, width=121)
        self.Label3.configure(background="#d9d9d9")
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(font="-family {Segoe UI} -size 12")
        self.Label3.configure(foreground="#000000")
        self.Label3.configure(text="""Room Members:""")

        self.done = tk.Button(top)
        self.done.place(relx=0.85, rely=0.917, height=34, width=77)
        self.done.configure(activebackground="#ececec")
        self.done.configure(activeforeground="#000000")
        self.done.configure(background="#d9d9d9")
        self.done.configure(command=new_room_gui_support.done)
        self.done.configure(disabledforeground="#a3a3a3")
        self.done.configure(font="-family {Segoe UI} -size 14")
        self.done.configure(foreground="#000000")
        self.done.configure(highlightbackground="#d9d9d9")
        self.done.configure(highlightcolor="black")
        self.done.configure(pady="0")
        self.done.configure(text="""Done""")
        self.done.configure(width=77)
        self.done.config(state='disable')

    def recap(self, data):
        for user in data:
            if user != name:
                self.users.insert('end', user)

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    """Configure the scrollbars for a widget."""

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                  + tk.Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        """Hide and show scrollbar as needed."""
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    """Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget."""
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledListBox(AutoScroll, tk.Listbox):
    """A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed."""
    @_create_container
    def __init__(self, master, **kw):
        tk.Listbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')

if __name__ == '__main__':
    vp_start_gui(None, None)
